// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace Login {

void protobuf_ShutdownFile_Login_2eproto() {
  delete IMMsgServReq::default_instance_;
  delete IMMsgServRsp::default_instance_;
  delete IMLoginReq::default_instance_;
  delete IMLoginRes::default_instance_;
  delete IMLogoutRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Login_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Login_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Login_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::BaseDefine::protobuf_AddDesc_BaseDefine_2eproto();
  IMMsgServReq::default_instance_ = new IMMsgServReq();
  IMMsgServRsp::default_instance_ = new IMMsgServRsp();
  IMLoginReq::default_instance_ = new IMLoginReq();
  IMLoginRes::default_instance_ = new IMLoginRes();
  IMLogoutRsp::default_instance_ = new IMLogoutRsp();
  IMMsgServReq::default_instance_->InitAsDefaultInstance();
  IMMsgServRsp::default_instance_->InitAsDefaultInstance();
  IMLoginReq::default_instance_->InitAsDefaultInstance();
  IMLoginRes::default_instance_->InitAsDefaultInstance();
  IMLogoutRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Login_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Login_2eproto_once_);
void protobuf_AddDesc_Login_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Login_2eproto_once_,
                 &protobuf_AddDesc_Login_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Login_2eproto {
  StaticDescriptorInitializer_Login_2eproto() {
    protobuf_AddDesc_Login_2eproto();
  }
} static_descriptor_initializer_Login_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMMsgServReq::IMMsgServReq()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Login.IMMsgServReq)
}

void IMMsgServReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IMMsgServReq::IMMsgServReq(const IMMsgServReq& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Login.IMMsgServReq)
}

void IMMsgServReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

IMMsgServReq::~IMMsgServReq() {
  // @@protoc_insertion_point(destructor:Login.IMMsgServReq)
  SharedDtor();
}

void IMMsgServReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMMsgServReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMMsgServReq& IMMsgServReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Login_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
#endif
  return *default_instance_;
}

IMMsgServReq* IMMsgServReq::default_instance_ = NULL;

IMMsgServReq* IMMsgServReq::New(::google::protobuf::Arena* arena) const {
  IMMsgServReq* n = new IMMsgServReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMMsgServReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Login.IMMsgServReq)
}

bool IMMsgServReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Login.IMMsgServReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:Login.IMMsgServReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Login.IMMsgServReq)
  return false;
#undef DO_
}

void IMMsgServReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Login.IMMsgServReq)
  // @@protoc_insertion_point(serialize_end:Login.IMMsgServReq)
}

int IMMsgServReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Login.IMMsgServReq)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgServReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMMsgServReq*>(&from));
}

void IMMsgServReq::MergeFrom(const IMMsgServReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Login.IMMsgServReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void IMMsgServReq::CopyFrom(const IMMsgServReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Login.IMMsgServReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgServReq::IsInitialized() const {

  return true;
}

void IMMsgServReq::Swap(IMMsgServReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMMsgServReq::InternalSwap(IMMsgServReq* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMMsgServReq::GetTypeName() const {
  return "Login.IMMsgServReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMMsgServReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMMsgServRsp::kResultCodeFieldNumber;
const int IMMsgServRsp::kPriorIpFieldNumber;
const int IMMsgServRsp::kBackipIpFieldNumber;
const int IMMsgServRsp::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMMsgServRsp::IMMsgServRsp()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Login.IMMsgServRsp)
}

void IMMsgServRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IMMsgServRsp::IMMsgServRsp(const IMMsgServRsp& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Login.IMMsgServRsp)
}

void IMMsgServRsp::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_code_ = 0;
  prior_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backip_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

IMMsgServRsp::~IMMsgServRsp() {
  // @@protoc_insertion_point(destructor:Login.IMMsgServRsp)
  SharedDtor();
}

void IMMsgServRsp::SharedDtor() {
  prior_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backip_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMMsgServRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMMsgServRsp& IMMsgServRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Login_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
#endif
  return *default_instance_;
}

IMMsgServRsp* IMMsgServRsp::default_instance_ = NULL;

IMMsgServRsp* IMMsgServRsp::New(::google::protobuf::Arena* arena) const {
  IMMsgServRsp* n = new IMMsgServRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMMsgServRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:Login.IMMsgServRsp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMMsgServRsp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMMsgServRsp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_code_, port_);
  prior_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backip_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool IMMsgServRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Login.IMMsgServRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BaseDefine.ResultType result_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result_code(static_cast< ::BaseDefine::ResultType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_prior_ip;
        break;
      }

      // optional string prior_ip = 2;
      case 2: {
        if (tag == 18) {
         parse_prior_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prior_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prior_ip().data(), this->prior_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Login.IMMsgServRsp.prior_ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_backip_ip;
        break;
      }

      // optional string backip_ip = 3;
      case 3: {
        if (tag == 26) {
         parse_backip_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backip_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->backip_ip().data(), this->backip_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Login.IMMsgServRsp.backip_ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional uint32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Login.IMMsgServRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Login.IMMsgServRsp)
  return false;
#undef DO_
}

void IMMsgServRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Login.IMMsgServRsp)
  // optional .BaseDefine.ResultType result_code = 1;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_code(), output);
  }

  // optional string prior_ip = 2;
  if (this->prior_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prior_ip().data(), this->prior_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Login.IMMsgServRsp.prior_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->prior_ip(), output);
  }

  // optional string backip_ip = 3;
  if (this->backip_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->backip_ip().data(), this->backip_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Login.IMMsgServRsp.backip_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->backip_ip(), output);
  }

  // optional uint32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:Login.IMMsgServRsp)
}

int IMMsgServRsp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Login.IMMsgServRsp)
  int total_size = 0;

  // optional .BaseDefine.ResultType result_code = 1;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
  }

  // optional string prior_ip = 2;
  if (this->prior_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prior_ip());
  }

  // optional string backip_ip = 3;
  if (this->backip_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->backip_ip());
  }

  // optional uint32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgServRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMMsgServRsp*>(&from));
}

void IMMsgServRsp::MergeFrom(const IMMsgServRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Login.IMMsgServRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
  if (from.prior_ip().size() > 0) {

    prior_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prior_ip_);
  }
  if (from.backip_ip().size() > 0) {

    backip_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backip_ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void IMMsgServRsp::CopyFrom(const IMMsgServRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Login.IMMsgServRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgServRsp::IsInitialized() const {

  return true;
}

void IMMsgServRsp::Swap(IMMsgServRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMMsgServRsp::InternalSwap(IMMsgServRsp* other) {
  std::swap(result_code_, other->result_code_);
  prior_ip_.Swap(&other->prior_ip_);
  backip_ip_.Swap(&other->backip_ip_);
  std::swap(port_, other->port_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMMsgServRsp::GetTypeName() const {
  return "Login.IMMsgServRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMMsgServRsp

// optional .BaseDefine.ResultType result_code = 1;
void IMMsgServRsp::clear_result_code() {
  result_code_ = 0;
}
 ::BaseDefine::ResultType IMMsgServRsp::result_code() const {
  // @@protoc_insertion_point(field_get:Login.IMMsgServRsp.result_code)
  return static_cast< ::BaseDefine::ResultType >(result_code_);
}
 void IMMsgServRsp::set_result_code(::BaseDefine::ResultType value) {
  
  result_code_ = value;
  // @@protoc_insertion_point(field_set:Login.IMMsgServRsp.result_code)
}

// optional string prior_ip = 2;
void IMMsgServRsp::clear_prior_ip() {
  prior_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IMMsgServRsp::prior_ip() const {
  // @@protoc_insertion_point(field_get:Login.IMMsgServRsp.prior_ip)
  return prior_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMMsgServRsp::set_prior_ip(const ::std::string& value) {
  
  prior_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.IMMsgServRsp.prior_ip)
}
 void IMMsgServRsp::set_prior_ip(const char* value) {
  
  prior_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.IMMsgServRsp.prior_ip)
}
 void IMMsgServRsp::set_prior_ip(const char* value, size_t size) {
  
  prior_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.IMMsgServRsp.prior_ip)
}
 ::std::string* IMMsgServRsp::mutable_prior_ip() {
  
  // @@protoc_insertion_point(field_mutable:Login.IMMsgServRsp.prior_ip)
  return prior_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMMsgServRsp::release_prior_ip() {
  // @@protoc_insertion_point(field_release:Login.IMMsgServRsp.prior_ip)
  
  return prior_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMMsgServRsp::set_allocated_prior_ip(::std::string* prior_ip) {
  if (prior_ip != NULL) {
    
  } else {
    
  }
  prior_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prior_ip);
  // @@protoc_insertion_point(field_set_allocated:Login.IMMsgServRsp.prior_ip)
}

// optional string backip_ip = 3;
void IMMsgServRsp::clear_backip_ip() {
  backip_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IMMsgServRsp::backip_ip() const {
  // @@protoc_insertion_point(field_get:Login.IMMsgServRsp.backip_ip)
  return backip_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMMsgServRsp::set_backip_ip(const ::std::string& value) {
  
  backip_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.IMMsgServRsp.backip_ip)
}
 void IMMsgServRsp::set_backip_ip(const char* value) {
  
  backip_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.IMMsgServRsp.backip_ip)
}
 void IMMsgServRsp::set_backip_ip(const char* value, size_t size) {
  
  backip_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.IMMsgServRsp.backip_ip)
}
 ::std::string* IMMsgServRsp::mutable_backip_ip() {
  
  // @@protoc_insertion_point(field_mutable:Login.IMMsgServRsp.backip_ip)
  return backip_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMMsgServRsp::release_backip_ip() {
  // @@protoc_insertion_point(field_release:Login.IMMsgServRsp.backip_ip)
  
  return backip_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMMsgServRsp::set_allocated_backip_ip(::std::string* backip_ip) {
  if (backip_ip != NULL) {
    
  } else {
    
  }
  backip_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backip_ip);
  // @@protoc_insertion_point(field_set_allocated:Login.IMMsgServRsp.backip_ip)
}

// optional uint32 port = 4;
void IMMsgServRsp::clear_port() {
  port_ = 0u;
}
 ::google::protobuf::uint32 IMMsgServRsp::port() const {
  // @@protoc_insertion_point(field_get:Login.IMMsgServRsp.port)
  return port_;
}
 void IMMsgServRsp::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Login.IMMsgServRsp.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMLoginReq::kUserNameFieldNumber;
const int IMLoginReq::kPasswordFieldNumber;
const int IMLoginReq::kOnlineStatusFieldNumber;
const int IMLoginReq::kClientTypeFieldNumber;
const int IMLoginReq::kClientVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMLoginReq::IMLoginReq()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Login.IMLoginReq)
}

void IMLoginReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IMLoginReq::IMLoginReq(const IMLoginReq& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Login.IMLoginReq)
}

void IMLoginReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  online_status_ = 0;
  client_type_ = 0;
  client_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

IMLoginReq::~IMLoginReq() {
  // @@protoc_insertion_point(destructor:Login.IMLoginReq)
  SharedDtor();
}

void IMLoginReq::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMLoginReq& IMLoginReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Login_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
#endif
  return *default_instance_;
}

IMLoginReq* IMLoginReq::default_instance_ = NULL;

IMLoginReq* IMLoginReq::New(::google::protobuf::Arena* arena) const {
  IMLoginReq* n = new IMLoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Login.IMLoginReq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMLoginReq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMLoginReq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(online_status_, client_type_);
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool IMLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Login.IMLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Login.IMLoginReq.user_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Login.IMLoginReq.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_online_status;
        break;
      }

      // optional .BaseDefine.UserStatType online_status = 3;
      case 3: {
        if (tag == 24) {
         parse_online_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_online_status(static_cast< ::BaseDefine::UserStatType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_client_type;
        break;
      }

      // optional .BaseDefine.ClientType client_type = 4;
      case 4: {
        if (tag == 32) {
         parse_client_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_client_type(static_cast< ::BaseDefine::ClientType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_client_version;
        break;
      }

      // optional string client_version = 5;
      case 5: {
        if (tag == 42) {
         parse_client_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_version().data(), this->client_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Login.IMLoginReq.client_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Login.IMLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Login.IMLoginReq)
  return false;
#undef DO_
}

void IMLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Login.IMLoginReq)
  // optional string user_name = 1;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Login.IMLoginReq.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Login.IMLoginReq.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional .BaseDefine.UserStatType online_status = 3;
  if (this->online_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->online_status(), output);
  }

  // optional .BaseDefine.ClientType client_type = 4;
  if (this->client_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->client_type(), output);
  }

  // optional string client_version = 5;
  if (this->client_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_version().data(), this->client_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Login.IMLoginReq.client_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->client_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:Login.IMLoginReq)
}

int IMLoginReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Login.IMLoginReq)
  int total_size = 0;

  // optional string user_name = 1;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // optional .BaseDefine.UserStatType online_status = 3;
  if (this->online_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->online_status());
  }

  // optional .BaseDefine.ClientType client_type = 4;
  if (this->client_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
  }

  // optional string client_version = 5;
  if (this->client_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_version());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMLoginReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMLoginReq*>(&from));
}

void IMLoginReq::MergeFrom(const IMLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Login.IMLoginReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.online_status() != 0) {
    set_online_status(from.online_status());
  }
  if (from.client_type() != 0) {
    set_client_type(from.client_type());
  }
  if (from.client_version().size() > 0) {

    client_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_version_);
  }
}

void IMLoginReq::CopyFrom(const IMLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Login.IMLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLoginReq::IsInitialized() const {

  return true;
}

void IMLoginReq::Swap(IMLoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMLoginReq::InternalSwap(IMLoginReq* other) {
  user_name_.Swap(&other->user_name_);
  password_.Swap(&other->password_);
  std::swap(online_status_, other->online_status_);
  std::swap(client_type_, other->client_type_);
  client_version_.Swap(&other->client_version_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMLoginReq::GetTypeName() const {
  return "Login.IMLoginReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMLoginReq

// optional string user_name = 1;
void IMLoginReq::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IMLoginReq::user_name() const {
  // @@protoc_insertion_point(field_get:Login.IMLoginReq.user_name)
  return user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMLoginReq::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.IMLoginReq.user_name)
}
 void IMLoginReq::set_user_name(const char* value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.IMLoginReq.user_name)
}
 void IMLoginReq::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.IMLoginReq.user_name)
}
 ::std::string* IMLoginReq::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:Login.IMLoginReq.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMLoginReq::release_user_name() {
  // @@protoc_insertion_point(field_release:Login.IMLoginReq.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMLoginReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:Login.IMLoginReq.user_name)
}

// optional string password = 2;
void IMLoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IMLoginReq::password() const {
  // @@protoc_insertion_point(field_get:Login.IMLoginReq.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMLoginReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.IMLoginReq.password)
}
 void IMLoginReq::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.IMLoginReq.password)
}
 void IMLoginReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.IMLoginReq.password)
}
 ::std::string* IMLoginReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Login.IMLoginReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:Login.IMLoginReq.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMLoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Login.IMLoginReq.password)
}

// optional .BaseDefine.UserStatType online_status = 3;
void IMLoginReq::clear_online_status() {
  online_status_ = 0;
}
 ::BaseDefine::UserStatType IMLoginReq::online_status() const {
  // @@protoc_insertion_point(field_get:Login.IMLoginReq.online_status)
  return static_cast< ::BaseDefine::UserStatType >(online_status_);
}
 void IMLoginReq::set_online_status(::BaseDefine::UserStatType value) {
  
  online_status_ = value;
  // @@protoc_insertion_point(field_set:Login.IMLoginReq.online_status)
}

// optional .BaseDefine.ClientType client_type = 4;
void IMLoginReq::clear_client_type() {
  client_type_ = 0;
}
 ::BaseDefine::ClientType IMLoginReq::client_type() const {
  // @@protoc_insertion_point(field_get:Login.IMLoginReq.client_type)
  return static_cast< ::BaseDefine::ClientType >(client_type_);
}
 void IMLoginReq::set_client_type(::BaseDefine::ClientType value) {
  
  client_type_ = value;
  // @@protoc_insertion_point(field_set:Login.IMLoginReq.client_type)
}

// optional string client_version = 5;
void IMLoginReq::clear_client_version() {
  client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IMLoginReq::client_version() const {
  // @@protoc_insertion_point(field_get:Login.IMLoginReq.client_version)
  return client_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMLoginReq::set_client_version(const ::std::string& value) {
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.IMLoginReq.client_version)
}
 void IMLoginReq::set_client_version(const char* value) {
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.IMLoginReq.client_version)
}
 void IMLoginReq::set_client_version(const char* value, size_t size) {
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.IMLoginReq.client_version)
}
 ::std::string* IMLoginReq::mutable_client_version() {
  
  // @@protoc_insertion_point(field_mutable:Login.IMLoginReq.client_version)
  return client_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMLoginReq::release_client_version() {
  // @@protoc_insertion_point(field_release:Login.IMLoginReq.client_version)
  
  return client_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMLoginReq::set_allocated_client_version(::std::string* client_version) {
  if (client_version != NULL) {
    
  } else {
    
  }
  client_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_version);
  // @@protoc_insertion_point(field_set_allocated:Login.IMLoginReq.client_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMLoginRes::kServerTimeFieldNumber;
const int IMLoginRes::kResultCodeFieldNumber;
const int IMLoginRes::kResultStringFieldNumber;
const int IMLoginRes::kOnlineStatusFieldNumber;
const int IMLoginRes::kUserInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMLoginRes::IMLoginRes()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Login.IMLoginRes)
}

void IMLoginRes::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_info_ = const_cast< ::BaseDefine::UserInfo*>(
      ::BaseDefine::UserInfo::internal_default_instance());
#else
  user_info_ = const_cast< ::BaseDefine::UserInfo*>(&::BaseDefine::UserInfo::default_instance());
#endif
}

IMLoginRes::IMLoginRes(const IMLoginRes& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Login.IMLoginRes)
}

void IMLoginRes::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_time_ = 0u;
  result_code_ = 0;
  result_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  online_status_ = 0;
  user_info_ = NULL;
}

IMLoginRes::~IMLoginRes() {
  // @@protoc_insertion_point(destructor:Login.IMLoginRes)
  SharedDtor();
}

void IMLoginRes::SharedDtor() {
  result_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_info_;
  }
}

void IMLoginRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMLoginRes& IMLoginRes::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Login_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
#endif
  return *default_instance_;
}

IMLoginRes* IMLoginRes::default_instance_ = NULL;

IMLoginRes* IMLoginRes::New(::google::protobuf::Arena* arena) const {
  IMLoginRes* n = new IMLoginRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMLoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Login.IMLoginRes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMLoginRes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMLoginRes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(server_time_, result_code_);
  result_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  online_status_ = 0;
  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) delete user_info_;
  user_info_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool IMLoginRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Login.IMLoginRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // optional .BaseDefine.ResultType result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result_code(static_cast< ::BaseDefine::ResultType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_result_string;
        break;
      }

      // optional string result_string = 3;
      case 3: {
        if (tag == 26) {
         parse_result_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result_string().data(), this->result_string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Login.IMLoginRes.result_string"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_online_status;
        break;
      }

      // optional .BaseDefine.UserStatType online_status = 4;
      case 4: {
        if (tag == 32) {
         parse_online_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_online_status(static_cast< ::BaseDefine::UserStatType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user_info;
        break;
      }

      // optional .BaseDefine.UserInfo user_info = 5;
      case 5: {
        if (tag == 42) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Login.IMLoginRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Login.IMLoginRes)
  return false;
#undef DO_
}

void IMLoginRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Login.IMLoginRes)
  // optional uint32 server_time = 1;
  if (this->server_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_time(), output);
  }

  // optional .BaseDefine.ResultType result_code = 2;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result_code(), output);
  }

  // optional string result_string = 3;
  if (this->result_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result_string().data(), this->result_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Login.IMLoginRes.result_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->result_string(), output);
  }

  // optional .BaseDefine.UserStatType online_status = 4;
  if (this->online_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->online_status(), output);
  }

  // optional .BaseDefine.UserInfo user_info = 5;
  if (this->has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->user_info_, output);
  }

  // @@protoc_insertion_point(serialize_end:Login.IMLoginRes)
}

int IMLoginRes::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Login.IMLoginRes)
  int total_size = 0;

  // optional uint32 server_time = 1;
  if (this->server_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_time());
  }

  // optional .BaseDefine.ResultType result_code = 2;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
  }

  // optional string result_string = 3;
  if (this->result_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result_string());
  }

  // optional .BaseDefine.UserStatType online_status = 4;
  if (this->online_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->online_status());
  }

  // optional .BaseDefine.UserInfo user_info = 5;
  if (this->has_user_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_info_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMLoginRes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMLoginRes*>(&from));
}

void IMLoginRes::MergeFrom(const IMLoginRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Login.IMLoginRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.server_time() != 0) {
    set_server_time(from.server_time());
  }
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
  if (from.result_string().size() > 0) {

    result_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_string_);
  }
  if (from.online_status() != 0) {
    set_online_status(from.online_status());
  }
  if (from.has_user_info()) {
    mutable_user_info()->::BaseDefine::UserInfo::MergeFrom(from.user_info());
  }
}

void IMLoginRes::CopyFrom(const IMLoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Login.IMLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLoginRes::IsInitialized() const {

  return true;
}

void IMLoginRes::Swap(IMLoginRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMLoginRes::InternalSwap(IMLoginRes* other) {
  std::swap(server_time_, other->server_time_);
  std::swap(result_code_, other->result_code_);
  result_string_.Swap(&other->result_string_);
  std::swap(online_status_, other->online_status_);
  std::swap(user_info_, other->user_info_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMLoginRes::GetTypeName() const {
  return "Login.IMLoginRes";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMLoginRes

// optional uint32 server_time = 1;
void IMLoginRes::clear_server_time() {
  server_time_ = 0u;
}
 ::google::protobuf::uint32 IMLoginRes::server_time() const {
  // @@protoc_insertion_point(field_get:Login.IMLoginRes.server_time)
  return server_time_;
}
 void IMLoginRes::set_server_time(::google::protobuf::uint32 value) {
  
  server_time_ = value;
  // @@protoc_insertion_point(field_set:Login.IMLoginRes.server_time)
}

// optional .BaseDefine.ResultType result_code = 2;
void IMLoginRes::clear_result_code() {
  result_code_ = 0;
}
 ::BaseDefine::ResultType IMLoginRes::result_code() const {
  // @@protoc_insertion_point(field_get:Login.IMLoginRes.result_code)
  return static_cast< ::BaseDefine::ResultType >(result_code_);
}
 void IMLoginRes::set_result_code(::BaseDefine::ResultType value) {
  
  result_code_ = value;
  // @@protoc_insertion_point(field_set:Login.IMLoginRes.result_code)
}

// optional string result_string = 3;
void IMLoginRes::clear_result_string() {
  result_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IMLoginRes::result_string() const {
  // @@protoc_insertion_point(field_get:Login.IMLoginRes.result_string)
  return result_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMLoginRes::set_result_string(const ::std::string& value) {
  
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.IMLoginRes.result_string)
}
 void IMLoginRes::set_result_string(const char* value) {
  
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.IMLoginRes.result_string)
}
 void IMLoginRes::set_result_string(const char* value, size_t size) {
  
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.IMLoginRes.result_string)
}
 ::std::string* IMLoginRes::mutable_result_string() {
  
  // @@protoc_insertion_point(field_mutable:Login.IMLoginRes.result_string)
  return result_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMLoginRes::release_result_string() {
  // @@protoc_insertion_point(field_release:Login.IMLoginRes.result_string)
  
  return result_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMLoginRes::set_allocated_result_string(::std::string* result_string) {
  if (result_string != NULL) {
    
  } else {
    
  }
  result_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result_string);
  // @@protoc_insertion_point(field_set_allocated:Login.IMLoginRes.result_string)
}

// optional .BaseDefine.UserStatType online_status = 4;
void IMLoginRes::clear_online_status() {
  online_status_ = 0;
}
 ::BaseDefine::UserStatType IMLoginRes::online_status() const {
  // @@protoc_insertion_point(field_get:Login.IMLoginRes.online_status)
  return static_cast< ::BaseDefine::UserStatType >(online_status_);
}
 void IMLoginRes::set_online_status(::BaseDefine::UserStatType value) {
  
  online_status_ = value;
  // @@protoc_insertion_point(field_set:Login.IMLoginRes.online_status)
}

// optional .BaseDefine.UserInfo user_info = 5;
bool IMLoginRes::has_user_info() const {
  return !_is_default_instance_ && user_info_ != NULL;
}
void IMLoginRes::clear_user_info() {
  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) delete user_info_;
  user_info_ = NULL;
}
const ::BaseDefine::UserInfo& IMLoginRes::user_info() const {
  // @@protoc_insertion_point(field_get:Login.IMLoginRes.user_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return user_info_ != NULL ? *user_info_ : *default_instance().user_info_;
#else
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
#endif
}
::BaseDefine::UserInfo* IMLoginRes::mutable_user_info() {
  
  if (user_info_ == NULL) {
    user_info_ = new ::BaseDefine::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:Login.IMLoginRes.user_info)
  return user_info_;
}
::BaseDefine::UserInfo* IMLoginRes::release_user_info() {
  // @@protoc_insertion_point(field_release:Login.IMLoginRes.user_info)
  
  ::BaseDefine::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
void IMLoginRes::set_allocated_user_info(::BaseDefine::UserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Login.IMLoginRes.user_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMLogoutRsp::kResultCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMLogoutRsp::IMLogoutRsp()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Login.IMLogoutRsp)
}

void IMLogoutRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IMLogoutRsp::IMLogoutRsp(const IMLogoutRsp& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Login.IMLogoutRsp)
}

void IMLogoutRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  result_code_ = 0u;
}

IMLogoutRsp::~IMLogoutRsp() {
  // @@protoc_insertion_point(destructor:Login.IMLogoutRsp)
  SharedDtor();
}

void IMLogoutRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMLogoutRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMLogoutRsp& IMLogoutRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Login_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
#endif
  return *default_instance_;
}

IMLogoutRsp* IMLogoutRsp::default_instance_ = NULL;

IMLogoutRsp* IMLogoutRsp::New(::google::protobuf::Arena* arena) const {
  IMLogoutRsp* n = new IMLogoutRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMLogoutRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:Login.IMLogoutRsp)
  result_code_ = 0u;
}

bool IMLogoutRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Login.IMLogoutRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Login.IMLogoutRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Login.IMLogoutRsp)
  return false;
#undef DO_
}

void IMLogoutRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Login.IMLogoutRsp)
  // optional uint32 result_code = 1;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:Login.IMLogoutRsp)
}

int IMLogoutRsp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Login.IMLogoutRsp)
  int total_size = 0;

  // optional uint32 result_code = 1;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMLogoutRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMLogoutRsp*>(&from));
}

void IMLogoutRsp::MergeFrom(const IMLogoutRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Login.IMLogoutRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
}

void IMLogoutRsp::CopyFrom(const IMLogoutRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Login.IMLogoutRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLogoutRsp::IsInitialized() const {

  return true;
}

void IMLogoutRsp::Swap(IMLogoutRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMLogoutRsp::InternalSwap(IMLogoutRsp* other) {
  std::swap(result_code_, other->result_code_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMLogoutRsp::GetTypeName() const {
  return "Login.IMLogoutRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMLogoutRsp

// optional uint32 result_code = 1;
void IMLogoutRsp::clear_result_code() {
  result_code_ = 0u;
}
 ::google::protobuf::uint32 IMLogoutRsp::result_code() const {
  // @@protoc_insertion_point(field_get:Login.IMLogoutRsp.result_code)
  return result_code_;
}
 void IMLogoutRsp::set_result_code(::google::protobuf::uint32 value) {
  
  result_code_ = value;
  // @@protoc_insertion_point(field_set:Login.IMLogoutRsp.result_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Login

// @@protoc_insertion_point(global_scope)
